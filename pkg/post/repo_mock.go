// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package post is a generated GoMock package.
package post

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	comment "github.com/greatjudge/redditclone/pkg/comment"
)

// MockPostRepo is a mock of PostRepo interface.
type MockPostRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepoMockRecorder
}

// MockPostRepoMockRecorder is the mock recorder for MockPostRepo.
type MockPostRepoMockRecorder struct {
	mock *MockPostRepo
}

// NewMockPostRepo creates a new mock instance.
func NewMockPostRepo(ctrl *gomock.Controller) *MockPostRepo {
	mock := &MockPostRepo{ctrl: ctrl}
	mock.recorder = &MockPostRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepo) EXPECT() *MockPostRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPostRepo) Add(post Post) (Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", post)
	ret0, _ := ret[0].(Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPostRepoMockRecorder) Add(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPostRepo)(nil).Add), post)
}

// AddComment mocks base method.
func (m *MockPostRepo) AddComment(id string, comm comment.Comment) (Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", id, comm)
	ret0, _ := ret[0].(Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockPostRepoMockRecorder) AddComment(id, comm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockPostRepo)(nil).AddComment), id, comm)
}

// Delete mocks base method.
func (m *MockPostRepo) Delete(postID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", postID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPostRepoMockRecorder) Delete(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostRepo)(nil).Delete), postID, userID)
}

// DeleteComment mocks base method.
func (m *MockPostRepo) DeleteComment(postID, commentID, userID string) (Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", postID, commentID, userID)
	ret0, _ := ret[0].(Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostRepoMockRecorder) DeleteComment(postID, commentID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostRepo)(nil).DeleteComment), postID, commentID, userID)
}

// Downvote mocks base method.
func (m *MockPostRepo) Downvote(postID, userID string) (Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Downvote", postID, userID)
	ret0, _ := ret[0].(Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Downvote indicates an expected call of Downvote.
func (mr *MockPostRepoMockRecorder) Downvote(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Downvote", reflect.TypeOf((*MockPostRepo)(nil).Downvote), postID, userID)
}

// GetAll mocks base method.
func (m *MockPostRepo) GetAll() ([]Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPostRepoMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPostRepo)(nil).GetAll))
}

// GetByCategory mocks base method.
func (m *MockPostRepo) GetByCategory(category string) ([]Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", category)
	ret0, _ := ret[0].([]Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockPostRepoMockRecorder) GetByCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockPostRepo)(nil).GetByCategory), category)
}

// GetByID mocks base method.
func (m *MockPostRepo) GetByID(id string) (Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPostRepoMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPostRepo)(nil).GetByID), id)
}

// GetUserPosts mocks base method.
func (m *MockPostRepo) GetUserPosts(username string) ([]Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPosts", username)
	ret0, _ := ret[0].([]Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPosts indicates an expected call of GetUserPosts.
func (mr *MockPostRepoMockRecorder) GetUserPosts(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPosts", reflect.TypeOf((*MockPostRepo)(nil).GetUserPosts), username)
}

// Unvote mocks base method.
func (m *MockPostRepo) Unvote(postID, userID string) (Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unvote", postID, userID)
	ret0, _ := ret[0].(Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unvote indicates an expected call of Unvote.
func (mr *MockPostRepoMockRecorder) Unvote(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unvote", reflect.TypeOf((*MockPostRepo)(nil).Unvote), postID, userID)
}

// Upvote mocks base method.
func (m *MockPostRepo) Upvote(postID, userID string) (Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upvote", postID, userID)
	ret0, _ := ret[0].(Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upvote indicates an expected call of Upvote.
func (mr *MockPostRepoMockRecorder) Upvote(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upvote", reflect.TypeOf((*MockPostRepo)(nil).Upvote), postID, userID)
}
